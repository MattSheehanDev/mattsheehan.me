<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
  xmlns:content="http://purl.org/rss/1.0/modules/content/"
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd"
  xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
  <channel>
    <title>Matt Sheehan</title>
    <link>http://www.mattsheehan.me</link>
    <description>The spiritual home of Matt Sheehan</description>
    <copyright>2015</copyright>
    <pubDate>Wed, 23 Sep 2015 00:00:00 -0400</pubDate>
    <item>
      <link>http://www.mattsheehan.me/archives/bruce-springsteen-66/</link>
      <description>&lt;p&gt;I’ve been following Bruce Springsteen since I can remember and seen him on tour a couple times, which is amazing considering today he’s 66 years old. The most surprising part is I’m always discovering songs or different live versions of songs that I’ve never heard before.&lt;/p&gt;

&lt;p&gt;Just today I heard what sounded like &lt;em&gt;Thunder Road&lt;/em&gt; on the radio…but as I waited to hear ‘Oh oh oh oh Thunder Road!’, they never came. Everything sounded like Thunder Road, but it wasn’t quite Thunder Road. Definitely a live version, maybe the lyrics were changed during rehearsal for fun? I waited to park and pulled my phone out to Bing some lyrics. Turns out the song was called &lt;em&gt;Wings for Wheels&lt;/em&gt; and was an early version of Thunder Road before it was recorded.&lt;/p&gt;

&lt;p&gt;Sorry Mary, Angelina looks lonely.&lt;/p&gt;

&lt;div class=&quot;video-wrapper&quot;&gt;
&lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/dRRQVfQZnZQ&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;small&gt;Wings for Wheels - 1975

&lt;/small&gt;&lt;/div&gt;
</description>
      <pubDate>Wed, 23 Sep 2015 00:00:00 -0400</pubDate>
      <guid>http://www.mattsheehan.me/archives/bruce-springsteen-66/</guid>
      <dc:date>2015-09-23T00:00:00-04:00</dc:date>
    </item>
    <item>
      <link>http://www.mattsheehan.me/archives/bernie-sanders/</link>
      <description>&lt;p&gt;Bernie Sanders reminds be of Ellsworth Toohey from &lt;em&gt;The Fountainhead&lt;/em&gt;. And if you’ve never read &lt;em&gt;The Fountainhead&lt;/em&gt;, Mr. Toohey was the villain. The vanguard of equality and love, or so he says. That government should be the great equalizer and that the people who have risked success don’t deserve it.&lt;/p&gt;

&lt;blockquote&gt;
Such is the nature of sums and quests for the lowest comon denominator. What, then, is the residue of many human minds put together, unaired, unspaced, undifferentiated.
&lt;/blockquote&gt;

&lt;p&gt;When did we stop celebrating human achievement? How can someone else have any stake in what I earn, in what I make? And when did we start pointing fingers at the rich? If anyone thinks that the more one person has, the less I can have, does not understand microeconomics. Wealth is not a zero sum game. Nobody has to lose for a few people to win, and nobody won by forcing someone else to lose.&lt;/p&gt;

&lt;blockquote&gt;
	As a matter of fact, the person who loves everybody and feels at home everywhere is the true hater of mankind. He expects nothing of men, so no form of depravity can outrage him.
&lt;/blockquote&gt;

&lt;p&gt;Let me give an example. If I buy 1 stock at $40, and the next day that stock goes to $50. Did I call the Federal Reserve and tell them to print more money for me? Did I rob someone of $10 and now some poor immigrant is $10 poorer? No. Wealth was created. Wealth was created and nobody had to lose (of course if you were shorting the stock, then you would have lost, but nobody &lt;em&gt;had&lt;/em&gt; to lose). This is how the rich stay rich. Not necessarily stocks, but by &lt;strong&gt;creating wealth&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Bernie Sanders has never created wealth in his life. Nothing is new or better or stronger because of him. He wants things to be stagnant. He wants things to be worse than stagnant, he wants things to &lt;em&gt;be fair and equal&lt;/em&gt;. To hell with your harder work! Someone else needs your money more than you do!&lt;/p&gt;

&lt;p&gt;We should be rewarded by what we create, not by what we don’t create. Some people create art, for some it’s music, and some others create wealth. Those are our choices, nobody forced our hands when we majored in art history.&lt;/p&gt;

&lt;blockquote&gt;
	Mr. Roark, we're alone here. Why don't you tell me what you think of me? In any words you wish. No one will hear you.
	But I don't think of you.
&lt;/blockquote&gt;

&lt;p&gt;How come we give so many people who don’t deserve our attention, our attention? How come we care at all what other people think of us? Don’t shame me because I’m fat! Don’t shame me because I’m skinny! Don’t shame me because I’m neither fat nor skinny! Bernie Sanders would tell you that all these shouts have equal weight in their validity. But that’s impossible, being fat has to be worse than being skinny, and being skinny has to be worse than being healthy. And people should make up for themselves what they want to be.&lt;/p&gt;

&lt;p&gt;People should have self-respect, not necessarily my respect and not necessarily your respect, but their own respect. Noboby can shame that, regardless of what you hear or what is said about you.&lt;/p&gt;

&lt;blockquote&gt;
	We are all brothers under the skin--and I, for one, would be willing to skin humanity to prove it.
&lt;/blockquote&gt;

&lt;p&gt;Bernie Sanders thinks that we’re all just here to be fertilizer. Fertilizer for the hopeful success of other people. Fertilizer to help other people reach their enlightenment. But what about our own? I am not fertilizer for anybody else. What is shared, is shared from the charity of my own heart, and because it merits my charity, not because I was told it merits my charity. Or that it merits part of my paycheck.&lt;/p&gt;

&lt;p&gt;Bernie Sanders does not want to bind us together through the triumph of human achievement that we all experience when we see a hundred story skyscraper. He would rather see us seperated through guilt shaming.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;lt;/rant&amp;gt;&lt;/strong&gt;&lt;/p&gt;
</description>
      <pubDate>Wed, 23 Sep 2015 00:00:00 -0400</pubDate>
      <guid>http://www.mattsheehan.me/archives/bernie-sanders/</guid>
      <dc:date>2015-09-23T00:00:00-04:00</dc:date>
    </item>
    <item>
      <link>http://www.mattsheehan.me/archives/ruby-is-oo-lisp/</link>
      <description>&lt;p&gt;I’ve fooled around and hankey-pankeyed with lisps for years. I’ve even wrote a toy &lt;a href=&quot;https://github.com/sheehamj13/mslisp&quot;&gt;lisp dialect&lt;/a&gt;. I’ve also gotten dirty with Ruby. This site itself is build using Jekyll&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, a static site generator written with Ruby, and I’ve wrote a few custom plugins to help my development along.&lt;/p&gt;

&lt;p&gt;But I had a shower thought after using the two. Ruby is really just an object-oriented (OO) dialect of lisp&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;. Sure there are libraries that add OO design principles to lisp, but Ruby takes all of the best parts of lisp and bakes OO constructs directly into it.&lt;/p&gt;

&lt;p class=&quot;soliloquy&quot;&gt;I would lump Ruby, lisp, and Javascript into one language family. They’re the languages I consider the &lt;em&gt;fun&lt;/em&gt; programming languages. Sure they’re not taken seriously by any of the ‘real’ developers, but how many times do you get to use the word ‘fun’ and programming in the same sentence. You might here ‘oh, that’s interesting’ or ‘very clever’&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; said by the real devs, but rarely ‘this is fun’, and I think that deserves remark.&lt;/p&gt;

&lt;p class=&quot;primtitle&quot;&gt;The value of everything&lt;/p&gt;

&lt;p&gt;Both Ruby and most lisp dialects attribute a value to everything (even if that value is NIL, a keyword that is shared). Undefined does not exist and something never goes uninitialized with some randomness.&lt;/p&gt;

&lt;p class=&quot;primtitle&quot;&gt;The truth of everything&lt;/p&gt;

&lt;p&gt;Everything is true, except NIL and FALSE. In boolean conversions, “x” is true, “nil” is true, and NIL is false. If you ever find yourself asking, ‘is 0 equivalent to true or false?’, the answer is ‘is 0 the equivalent of NIL or FALSE? No.’, so theres your answer. This makes using boolean logic less painful, you never have to type &lt;strong&gt;if x == nil&lt;/strong&gt; or any equivalent.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;if x &lt;em&gt;body&lt;/em&gt;&lt;/strong&gt; or the lispy &lt;strong&gt;(if x &lt;em&gt;body&lt;/em&gt;)&lt;/strong&gt; is good enough.&lt;/p&gt;

&lt;p class=&quot;primtitle&quot;&gt;Operators are functions&lt;/p&gt;

&lt;p&gt;Ok, alright already. Operators are basically always functions in every language. But I promise it’s different here, they really feel like functions. In lisp you have &lt;strong&gt;(+ 2 2)&lt;/strong&gt;, which at any point you can &lt;strong&gt;(set! + (lambda (x y) (- x y)))&lt;/strong&gt;, and now addition is subtraction. Since Ruby is just an OO dialect of lisp, this function-ness goes a step further, &lt;strong&gt;2.+(2)&lt;/strong&gt;, is the equivalent of 2 + 2, except in the former the +-operator appears as a method on the &lt;em&gt;Integer Class&lt;/em&gt;&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p class=&quot;soliloquy&quot;&gt;Everybody should still write 2 + 2 for clarity, but the fact that you can write it alternatively relays my point across.&lt;/p&gt;

&lt;p class=&quot;primtitle&quot;&gt;Everything is a Function-Object&lt;/p&gt;

&lt;p&gt;In lisp everything is a function since there is no OO classes and in Ruby, everything is technically an object, but can be thought of as a function (in the same way as Javascript). Just like in lisp where in the line of code &lt;strong&gt;(defun &lt;em&gt;name&lt;/em&gt; &lt;em&gt;body&lt;/em&gt;)&lt;/strong&gt;, which defines a new function, &lt;strong&gt;defun&lt;/strong&gt; is really just another function that takes a &lt;em&gt;name&lt;/em&gt; parameter and a &lt;em&gt;body&lt;/em&gt; parameter. The same can be said of Ruby. In the line of code &lt;strong&gt;def &lt;em&gt;name&lt;/em&gt; &lt;em&gt;body block&lt;/em&gt;&lt;/strong&gt;, which defines a new class method, &lt;strong&gt;def&lt;/strong&gt; is really just a function that takes two parameters.&lt;/p&gt;

&lt;p class=&quot;soliloquy&quot;&gt;In ruby this also extends to the class access modifiers (public, private, and protected). In the line &lt;strong&gt;private def &lt;em&gt;method name&lt;/em&gt; &lt;em&gt;body block&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;private&lt;/strong&gt; is just a function that takes the return of the function &lt;strong&gt;def&lt;/strong&gt;.&lt;/p&gt;

&lt;p class=&quot;primtitle&quot;&gt;Conventions&lt;/p&gt;

&lt;p&gt;And finally the naming conventions, which Ruby has taken from lisp. Functions with question marks at the end usually answer boolean questions about something, while functions with exclamation marks the end usually denote that the function modifies its input.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;Btw, Jekyll v3.0 is leaps and bounds better than v2.x. Unfortunately, v3.0 is still in beta. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;I know Ruby looks a lot like Python, I too thought they would be about the same, because of the similar importance attributed to vertical white-space and their bracketless syntax. But those are just syntactical details, and the similarities between the &lt;em&gt;design&lt;/em&gt; of the language ends there. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;Other things developers might say are ‘Neat!’, ‘Cool!’, and ‘Awesome!’, as well as any conjugations such as ‘Neato!’ and ‘Coolio!’. &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot;&gt;
      &lt;p&gt;Yeah. Even numbers are objects. &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
      <pubDate>Tue, 22 Sep 2015 00:00:00 -0400</pubDate>
      <guid>http://www.mattsheehan.me/archives/ruby-is-oo-lisp/</guid>
      <dc:date>2015-09-22T00:00:00-04:00</dc:date>
    </item>
    <item>
      <link>http://www.mattsheehan.me/archives/ios9-review/</link>
      <description>&lt;p&gt;&lt;em&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;: If you’re running an older device, iOS 9 is iOS 8 is iOS 7.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;These are my thoughts for iOS 9 running on a 4 year old iPad 2 (not the iPad Air 2, just the iPad 2. Yeah.) and an iPhone 4s (back when the ‘s’ was understood to still stand for ‘siri’. We don’t know what it stands for anymore).&lt;/p&gt;

&lt;p&gt;I’m a little surprised iOS 9 was released for the iPad 2 and iPhone 4s. Actually, I was a little surprised iOS 8 was released for iPad 2 and iPhone 4s. These little machines have seen 5 generations of major iOS versions in a little of 4 years.&lt;/p&gt;

&lt;p class=&quot;primtitle&quot;&gt;App Switching&lt;/p&gt;

&lt;p&gt;As far as the feature list goes in iOS 9, well, neither of my devices are seeing a lot of the new features. The first thing I did notice was the new app switcher screen that appears when you double tap the home screen or swipe up on the iPad with four fingers. That’s probably the screen I visit the most since I make sure to always close my last app since the device’s memory is small and the battery has been degrading for awhile now. Your ‘most recent’ contacts aren’t shown there anymore. I guess Apple noticed that the last person who called me (thanks mom), isn’t who I’m trying to find when I’m switching between Flipboard and Safari. The new layout works way better on the larger iPad screen than the tiny iPhone 4s screen, but I’m assuming on the newer iPhone’s it would be less squished.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ipad_app_switching.PNG&quot; alt=&quot;iPad app switching&quot; /&gt;
&lt;small&gt;The app switching screen on the iPad. BTW, this is 2 too many apps open for an iPad 2. Woah, alliteration.&lt;/small&gt;&lt;/p&gt;

&lt;p class=&quot;primtitle&quot;&gt;News&lt;/p&gt;

&lt;p&gt;First I used Pulse, then there was the reign of Flipboard, now iOS 9 has it’s own news app. The news app functions a lot like Flipboard in it’s style but it’s style reminds me A LOT of Windows 8/10’s news app. The only difference is iOS 9 news might be a little cleaner. The best feature for me about Flipboard is the Pocket integration, which iOS 9 news also has (the Windows 8/10 news app was missing this, but you could save articles to the inferior reading list app).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ipad_screen_capture.PNG&quot; alt=&quot;iPad screen capture&quot; /&gt;
&lt;small&gt;This is what my one and only app screen. Watching videos and reading web articles are what the iPad 2 is best at…still.&lt;/small&gt;&lt;/p&gt;

&lt;p class=&quot;primtitle&quot;&gt;Notes&lt;/p&gt;

&lt;p&gt;The Notes app is significantly improved in iOS 9, including the ability to organize notes into folders and inline images into your notes. There are still plenty of better note taking apps in the App Store though.&lt;/p&gt;

&lt;p class=&quot;soliloquy&quot;&gt;Speaking for the iPad 2 and iPhone 4s, I’ve always found note taking inferior to pen and paper. Notes should be handwritten, not typed, and there are no great pen stylus’s for older devices like there are for some of the newer ones.&lt;/p&gt;
</description>
      <pubDate>Thu, 17 Sep 2015 00:00:00 -0400</pubDate>
      <guid>http://www.mattsheehan.me/archives/ios9-review/</guid>
      <dc:date>2015-09-17T00:00:00-04:00</dc:date>
    </item>
    <item>
      <link>http://www.mattsheehan.me/archives/better-writing/</link>
      <description>&lt;p&gt;&lt;em&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;: I want to be better at writing.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There are a lot of hard parts to writing though, a lot of road blocks I’ve encountered that have prevented me from writing more. Let’s start with&lt;/p&gt;

&lt;p class=&quot;primtitle&quot;&gt;Finding a style&lt;/p&gt;

&lt;p&gt;Hands down, this is the hardest part. I want to write, but I don’t know what to write about, and when I do know what to write about, I don’t have the energy.&lt;/p&gt;

&lt;p&gt;Because having the energy would mean finding my folder where I keep my ramblings, reviewing how to write in Markdown, and then creating some paragraphs that hopefully fit together in some loose enough way that they don’t seem totally erratic.&lt;/p&gt;

&lt;p&gt;Having a style streamlines all of this. If you scroll past some of my more previous ramblings, you might notice I’ve been trying to find a style that is A) reusable for multiple essays so that I don’t have to remember &lt;em&gt;how&lt;/em&gt; to write, I can just start writing. And B) seems natural and fluid in it’s seperation of thoughts.&lt;/p&gt;

&lt;p&gt;A lot of what I see when reading other essays is this strange staccato style where every sentence seems accented or like someone is trying to tell a joke with no story just a string of punchlines. I’ve tried this style and I’ve learned it’s not me. Most of my ideas don’t have a clear seperation between each other which makes this style difficult and leads me to&lt;/p&gt;

&lt;p class=&quot;primtitle&quot;&gt;Edifying your thoughts&lt;/p&gt;

&lt;p&gt;This is one of the benefits I’m hoping to gain from writing more (and eventually consistently better). A lot of the times when you sit down to start, you immediately hit this brain block of “I have something I want to say, but I’m not sure where to begin or how to say it.”. At which point you become frustrated with everything and either quit or write something that you know is not your best. So I constantly have to remind myself that&lt;/p&gt;

&lt;p class=&quot;primtitle&quot;&gt;I’m not blogging, I’m writing&lt;/p&gt;

&lt;p&gt;Blogging requires someone else, somewhere else, reading what you write online. No one’s reading my shit. I’m writing only to entertain myself and because it’s a skill that will help me, not only communicate better, but &lt;em&gt;think&lt;/em&gt; better as my thoughts clarify when I’m not only thinking them, but also typing them.&lt;/p&gt;

&lt;p&gt;And I can write anywhere. I don’t have to write here either, I can write on my phone, I can write in my notes, I can write in someone else’s notes. It all counts toward writing, which is my goal. Readers are not my goal.&lt;/p&gt;

&lt;p&gt;Writing clarifies your ideas. Blogging amplifies your emotions (think twitter).&lt;/p&gt;

&lt;p class=&quot;primtitle&quot;&gt;Picking a topic&lt;/p&gt;

&lt;p&gt;This might seem the hardest, but once you don’t have to think about your style (how you’re going to write) and your thoughts seem clear (how you’re going to say it), finding something to write about is actually not difficult. Everybody has thoughts everyday that we think or say then throw in the disposal and move on. Instead of forgetting it, just stick one of those thoughts in your back pocket and ruminate on it over some time (that period of time might be minutes, hours, or days). Don’t just lick it and put it back like all your other ideas but dig into it.&lt;/p&gt;
</description>
      <pubDate>Thu, 17 Sep 2015 00:00:00 -0400</pubDate>
      <guid>http://www.mattsheehan.me/archives/better-writing/</guid>
      <dc:date>2015-09-17T00:00:00-04:00</dc:date>
    </item>
    <item>
      <link>http://www.mattsheehan.me/archives/signals/</link>
      <description>&lt;p&gt;Here’s some things I read this week.&lt;/p&gt;

&lt;p class=&quot;subtitle&quot;&gt;&lt;a href=&quot;http://www.newyorker.com/magazine/2015/02/23/shape-things-come&quot;&gt;The Shape of Things to Come&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;An article from earlier this year featuring Jony Ive and his influence over Apple’s design over the last decade culminating into the latest product, the Apple Watch.&lt;/p&gt;

&lt;p class=&quot;subtitle&quot;&gt;&lt;a href=&quot;http://www.newyorker.com/magazine/2015/05/18/world-without-end-raffi-khatchadourian&quot;&gt;World Without End&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another article from earlier this year from the New Yorker featuring the procedurally generated video game, No Man’s Sky.&lt;/p&gt;

&lt;p class=&quot;subtitle&quot;&gt;&lt;a href=&quot;http://www.ccs.neu.edu/home/matthias/Thoughts/Growing_a_Programmer.html&quot;&gt;Growing a Programmer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;An interesting pragmatic look of CS coursework, focusing more on the design and architecture of complex software.&lt;/p&gt;

&lt;p class=&quot;subtitle&quot;&gt;&lt;a href=&quot;http://www.anandtech.com/show/9605/the-ios-9-review&quot;&gt;The Apple iOS 9 Review&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I just like anandtech for their long reads. I’ll probably do an iOS 9 review after I download it.&lt;/p&gt;

&lt;p class=&quot;subtitle&quot;&gt;&lt;a href=&quot;http://learnxinyminutes.com/&quot;&gt;Learn X in Y Minutes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I didn’t actually find this this week, but I still wanted to share it because of it’s helpful ‘learn by example’ layout.&lt;/p&gt;
</description>
      <pubDate>Wed, 16 Sep 2015 00:00:00 -0400</pubDate>
      <guid>http://www.mattsheehan.me/archives/signals/</guid>
      <dc:date>2015-09-16T00:00:00-04:00</dc:date>
    </item>
    <item>
      <link>http://www.mattsheehan.me/archives/startup-economics/</link>
      <description>&lt;p class=&quot;primtitle&quot;&gt;The Law of Supply&lt;/p&gt;

&lt;p class=&quot;subtitle&quot;&gt;Definition&lt;/p&gt;

&lt;p&gt;As price increases, the quantity supplied increases. As price decreases, the quantity supplied decreases.&lt;/p&gt;

&lt;p class=&quot;subtitle&quot;&gt;Example&lt;/p&gt;

&lt;p&gt;We see the this (the law of supply) in the mobile phone industry today. When Apple first entered the market with, what was then, an expensive phone and had success with large margins for profit, other suppliers began entering the market. Until we got to the point where we are now, with a glut of phone suppliers and a lot of phones selling with thin margins and little profits trying to compete on price.&lt;/p&gt;

&lt;p class=&quot;subtitle&quot;&gt;Prediction&lt;/p&gt;

&lt;p&gt;I think we’re going to see a lot of phone suppliers leave the market as the price and profit margin of phones get driven lower. This isn’t a radical prediction as we’re already seeing the beginnings of this and it logically follows from the law of supply that as price decreases the supply will decrease.&lt;/p&gt;

&lt;p&gt;Market saturation, in the U.S as least, has been reached, but &lt;em&gt;Market equilibrium&lt;/em&gt; hasn’t. There are more phones being supplied (at a given price) than being demanded. Market equilibrium has not been reached in developing countries either, but for the opposite reasons.&lt;/p&gt;

&lt;p class=&quot;subtitle&quot;&gt;Outlier&lt;/p&gt;

&lt;p&gt;Apple remains one of the only phone suppliers that has retained it’s pricing and is actually increasing sales as demand is driven higher as most other phones are seen as inferior goods.&lt;/p&gt;

&lt;p class=&quot;primtitle&quot;&gt;Normal goods/Inferior goods&lt;/p&gt;

&lt;p class=&quot;subtitle&quot;&gt;Definition&lt;/p&gt;

&lt;p&gt;A normal good is any good in which demand increases and decreases with income. As income increases, demand for normal goods increases. As income decreases demand for normal goods decreases. An inferior good is any good in which demand decreases as income increases and increases as income decreases.&lt;/p&gt;

&lt;p class=&quot;subtitle&quot;&gt;Example&lt;/p&gt;

&lt;p&gt;Piggybacking on our last example, in the phone market, Apple and Samsung are the two normal goods suppliers (maybe even Apple being considered ‘more normal’), with most other phone supplies seen as inferior goods. As income increases $700, usually spread over $30 a month, doesn’t seem too intimidating, and a lot of people will trade up from their $99 phone. But as income decreases, more people will settle for their $99 phones and a cheaper monthly bill, rather than spend $100 a month (monthly payment + data plan + talk/text plan) to have the iPhone 6s Plus.&lt;/p&gt;

&lt;p class=&quot;subtitle&quot;&gt;Prediction&lt;/p&gt;

&lt;p&gt;No change, Apple will remain to be seen as a ‘normal’ good, while everyone else races to cater to those who can only afford ‘inferior’ goods.&lt;/p&gt;

&lt;p class=&quot;primtitle&quot;&gt;Elasticity&lt;/p&gt;

&lt;p class=&quot;subtitle&quot;&gt;Definition&lt;/p&gt;

&lt;p&gt;Elasticity is how much demand is influenced by price. A product (or service) is said to be elastic if a given percentage change in price leads to a large percentage change in demand. Another way to put this is that demand is highly influenced by price. A product is said to be inelastic if a given percentage change in price leads to a small percentage change in demand. Another way to put this is that demand is not influenced by price very much.&lt;/p&gt;

&lt;p class=&quot;subtitle&quot;&gt;Formula&lt;/p&gt;

&lt;p&gt;% change in quantity demanded / % change in price&lt;/p&gt;

&lt;p class=&quot;subtitle&quot;&gt;Remarks&lt;/p&gt;

&lt;p&gt;It’s important to note that elasticity is the &lt;em&gt;percent&lt;/em&gt; changed. So if you price your product at $2.00 and have a demand of 30 units and then increase the price to $4.00 and have a demand of 20 units, you will have a higher elasticity because you increased price by 50% but demand only dropped by 33%.&lt;/p&gt;

&lt;p&gt;You might also notice that total revenue can be increased by increasing the price to $4.00 ($4.00 * 20 &amp;gt; $2.00 * 30). Which means that it would make financial sense to set the price at $4.00.&lt;/p&gt;

&lt;p class=&quot;subtitle&quot;&gt;Relevance?&lt;/p&gt;

&lt;p&gt;How is this relevant to what is happening in our industry? Well instead of companies setting prices at $4.00 to increase total revenue, prices are being kept low (at say the hypothetical $2.00) sacrificing total revenue, so that the user base and market share can grow faster.&lt;/p&gt;

&lt;p class=&quot;subtitle&quot;&gt;Consequences&lt;/p&gt;

&lt;p&gt;The most insane part is that investors actually like this model. Especially with startups where most profit that investors see will not come from the revenue of the company, but from the acquistion of the company by a larger company or after the startup’s IPO.&lt;/p&gt;

&lt;p&gt;This &lt;em&gt;hope&lt;/em&gt; for future returns is flawed in its fundamental premise, that users are loyal to one brand and the cost of switching brands is higher than the cost of staying.&lt;/p&gt;

&lt;p&gt;Users will also become accustomed to the lower prices and as soon as prices increase, demand will increase for substitute goods by competitors and most of their market share will be wiped as quickly as it was created.&lt;/p&gt;

&lt;p class=&quot;soliloquy&quot;&gt;Here’s an idea. Look for companies that don’t take or need a lot of outside money and grow their revenue alongside their quantity demanded until market equilibrium has been reached.
&lt;br /&gt;
Instead of the current unsustainable model where market surplus is reached, the company is sold or goes public, everyone cashes in, and the company implodes as the market contracts, rapidly shrinking the companies overgrowth.&lt;/p&gt;
</description>
      <pubDate>Tue, 15 Sep 2015 00:00:00 -0400</pubDate>
      <guid>http://www.mattsheehan.me/archives/startup-economics/</guid>
      <dc:date>2015-09-15T00:00:00-04:00</dc:date>
    </item>
    <item>
      <link>http://www.mattsheehan.me/archives/apple-wwdc/</link>
      <description>&lt;p class=&quot;primtitle&quot;&gt;iPhone 6s (plus)&lt;/p&gt;

&lt;p class=&quot;subtitle&quot;&gt;Thoughts&lt;/p&gt;

&lt;p&gt;I’m not quite sure how ‘3D touch’ works, but I’m assuming it works a lot like force touch on the new Macbook. If that’s the case, this is the coolest feature in a phone since touch screens became popular. This is cooler than Siri, Touch ID, and a 12MP camera combined. A touch screen that simulates clicking fixes all of my complaints with touchscreens. Gaming on your phone? Now you have better buttons. Typing on your phone? Now you have a better keyboard. This will improve touch accuracy by 300% (I might be making that number up, I honestly think most of my typing errors are made by me just clunkily trying to hit tiny buttons of my phone and not realizing if I hit the right button or even hit the button at all. Hell, isn’t that why autocompletion and autocorrect were added?). Some might say the iPhone 6s won’t be as great as the iPhone 6 was, and that might be true in terms of sales, but the 6s is leaps and bounds ahead of the 6. I am excited about the iPhone for the first time since the iPhone 4s.&lt;/p&gt;

&lt;p class=&quot;subtitle&quot;&gt;Awkward&lt;/p&gt;

&lt;p&gt;Whats with this Rose Gold (read ‘pink’) coloring?&lt;/p&gt;

&lt;p class=&quot;primtitle&quot;&gt;iPad Pro&lt;/p&gt;

&lt;p class=&quot;subtitle&quot;&gt;Thoughts&lt;/p&gt;

&lt;p&gt;This is definitely a rip off from the Microsoft Surface Pro 3. But a few details worthy of remark are the starting price of $800 (+ $99 for the stylus ‘pencil’ + the price of the keyboard), which is probably a better machine than the $800 Surface Pro 3 with a Core i3 but is quickly eclipsed by the Surface Pro 3 once any upgrade in RAM, SSD, or processor is added, and the kickstand. Microsoft made the decision to add the kickstand as part of the ‘tablet’ while the iPad Pro retains the traditional iPad look, and adds the kickstand as part of the keyboard attachment. I actually think having the kickstand as part of the keyboard was a better decision.&lt;/p&gt;

&lt;p class=&quot;subtitle&quot;&gt;Comparison&lt;/p&gt;

&lt;p class=&quot;column half&quot;&gt;iPad Pro&lt;br /&gt;
&lt;strong&gt;+&lt;/strong&gt; Larger display (12.9’’)&lt;br /&gt;
&lt;strong&gt;+&lt;/strong&gt; Higher resolution display (2732x2048)&lt;br /&gt;
&lt;strong&gt;+&lt;/strong&gt; Entry model is equal or superior to the entry Surface Pro 3&lt;br /&gt;
&lt;strong&gt;+&lt;/strong&gt; Has a cellular data model&lt;br /&gt;
&lt;strong&gt;-&lt;/strong&gt; Pen not included&lt;br /&gt;
&lt;strong&gt;-&lt;/strong&gt; Lower storage and memory options&lt;br /&gt;
&lt;strong&gt;-&lt;/strong&gt; No USB&lt;br /&gt;
&lt;strong&gt;=&lt;/strong&gt; Weight (1.57 pounds)&lt;br /&gt;&lt;/p&gt;

&lt;p class=&quot;column half&quot;&gt;Surface Pro 3&lt;br /&gt;
&lt;strong&gt;+&lt;/strong&gt; Up to core i7 w/ 8GB of RAM&lt;br /&gt;
&lt;strong&gt;+&lt;/strong&gt; Pen included&lt;br /&gt;
&lt;strong&gt;+&lt;/strong&gt; More applications for productivity&lt;br /&gt;
&lt;strong&gt;=-&lt;/strong&gt; Lower display resolution (2160x1440) but still great&lt;br /&gt;
&lt;strong&gt;=-&lt;/strong&gt; Slightly heavier but similar weight (1.76 pounds)&lt;br /&gt;&lt;/p&gt;

&lt;p class=&quot;primtitle&quot;&gt;Apple TV&lt;/p&gt;

&lt;p class=&quot;subtitle&quot;&gt;Thoughts&lt;/p&gt;

&lt;p&gt;Nothing to see here, move along.&lt;/p&gt;
</description>
      <pubDate>Mon, 14 Sep 2015 00:00:00 -0400</pubDate>
      <guid>http://www.mattsheehan.me/archives/apple-wwdc/</guid>
      <dc:date>2015-09-14T00:00:00-04:00</dc:date>
    </item>
    <item>
      <link>http://www.mattsheehan.me/archives/processing/</link>
      <description>&lt;p&gt;This weekend I was playing with &lt;a href=&quot;https://processing.org/&quot;&gt;processing&lt;/a&gt; after coming working through the first lesson of &lt;a href=&quot;https://www.khanacademy.org/partner-content/pixar&quot;&gt;Pixar in a Box&lt;/a&gt; on &lt;a href=&quot;https://khanacademy.org&quot;&gt;Khan Academy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There’s also this super neat javascript library that renders your processing scripts on an html canvas element called &lt;a href=&quot;http://processingjs.org/&quot;&gt;processing.js&lt;/a&gt;. Which makes processing not only a fun tool for your computer, but lets you make fun projects for the web as well&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;To summarize, Pixar in a Box begins with environment modeling. Rendering a blade of grass is given as an example and is described in terms of a parabola, or more specifically a parabolic arc. The first part is an intro with examples, and for those that want to venture further, can venture into the second part which explains the algebra.&lt;/p&gt;

&lt;p&gt;I decided it’d be fun and more concrete to implement what I learned myself, so I dug up processing again and had fun making this! I’d check out khan academy if you wanted to know more, since it would be explained better there than I could explain myself.&lt;/p&gt;

&lt;p&gt;If you want to view the demo (below), make sure you navigate to the full post page by clicking the title above (if you haven’t already).&lt;/p&gt;

&lt;canvas width=&quot;100%&quot; height=&quot;100%&quot; data-processing-sources=&quot;/projects/parabolic_arc/parabolic_arc.pde /projects/parabolic_arc/parabolic_controls.pde&quot;&gt;
&lt;/canvas&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;It’s much easier working with processing than any specific javascript library for rendering to a canvas. I guess that’s &lt;a href=&quot;https://en.wikipedia.org/wiki/The_Pros_and_Cons_of_Hitch_Hiking&quot;&gt;the pro’s and con’s of working with a domain specific language&lt;/a&gt;. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
      <pubDate>Sun, 30 Aug 2015 00:00:00 -0400</pubDate>
      <guid>http://www.mattsheehan.me/archives/processing/</guid>
      <dc:date>2015-08-30T00:00:00-04:00</dc:date>
    </item>
    <item>
      <link>http://www.mattsheehan.me/archives/emacs/</link>
      <description>&lt;p&gt;This is mostly for me (as is mostly everything here), but I’ve been working with Emacs for the past couple of weeks and it’s become my primary text-editor for any long, multi-documented, want to move quick task. Actually honestly for the first week I worked really slow within emacs, so slow I closed it down and opened up Notepad. But after a while I figured out some of the keyboard shortcuts, which at first are very unintuitive since I’m use to working within Visual Studio and have a lot of those keyboard shortcuts already memorized and are in my muscle memory. So it was hard to work against my memory and have to exert my mind to remember ‘Wait, how do I copy again? How do I paste?’.&lt;/p&gt;

&lt;p&gt;After lots of time with that, I’ve managed to learn some of the really essential shortcuts. I know that there many more useful ones out there, but at least having these few keyboard commands at your fingertips won’t make you want to shout followed by crying.&lt;/p&gt;

&lt;p&gt;A few notes first. The &lt;code&gt;Alt-key&lt;/code&gt; is abbreviated as &lt;code&gt;M&lt;/code&gt;&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; and the &lt;code&gt;Ctrl-key&lt;/code&gt; is abbreviated as &lt;code&gt;C&lt;/code&gt;. So C-x C-f means Hold Ctrl then press ‘x’ followed by Holding Ctrl again (or keep holding it from before) and press ‘f’. Dashes ‘-‘ connect key pairs.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[M-w] copy
[C-y] paste
[C-n] next line (like the DOWN arrow, think of 'n' as 'next')
[C-p] previous line (like the UP arrow, think of 'p' as 'previous')
[C-f] next character (like the right arrow, think of 'f' as 'forward')
[C-b] previous character (like the left arrow, think of 'b' as 'back')
[M-x] enter command, such as M-x 'cd' to change directory
[C-2] open a window at the bottom
[C-3] open a window to the right
[C-1] close all windows except your current window
[C-x C-f] find and open (or create if non-existing) file
[C-s] search
[C-x b] change to another open buffer
[C-x C-b] list all open buffers
[C-x C-s] save
[C-x h] select all
[C-x C-c] quit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And those are the main shortcuts that you &lt;strong&gt;need&lt;/strong&gt; to know to at least survive.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;I think it has something to do with old keyboard having a ‘meta’ key instead of an ‘alt’ key and the abbreviation has just kind of stuck. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
      <pubDate>Tue, 30 Jun 2015 00:00:00 -0400</pubDate>
      <guid>http://www.mattsheehan.me/archives/emacs/</guid>
      <dc:date>2015-06-30T00:00:00-04:00</dc:date>
    </item>
    <item>
      <link>http://www.mattsheehan.me/archives/mslisp/</link>
      <description>&lt;p&gt;I’ve been working fervently the past &lt;strong&gt;15 days&lt;/strong&gt;&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; on my first language and interpreter, a dialect of lisp I’ve come to refer to as &lt;em&gt;MsLisp&lt;/em&gt;. I had a few goals starting, some of which are still in progress.&lt;/p&gt;

&lt;h6 id=&quot;what-i-wanted&quot;&gt;What I wanted&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;I wanted an embeddable lisp that could run on tiny specialized hardware.&lt;/li&gt;
  &lt;li&gt;A minimal interpreter with most implementation written in lisp itself (for portability).&lt;/li&gt;
  &lt;li&gt;Written in portable C++.&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;what-i-have&quot;&gt;What I have&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;A working dialect of lisp with a minimal interpreter.&lt;/li&gt;
  &lt;li&gt;A small standard library with basic functionality.&lt;/li&gt;
  &lt;li&gt;Written in C#.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I plan on reading up some more on some lisp functionality and fixing up some design changes before porting the code to C++ or start working on any other versions of it. Most of MsLisp is inspired by &lt;a href=&quot;http://www.gnu.org/software/mit-scheme/&quot;&gt;Scheme&lt;/a&gt; with some of parts stolen from the &lt;a href=&quot;http://www.clisp.org/&quot;&gt;CLisp&lt;/a&gt; implementation of Common Lisp. I’ve started working through &lt;a href=&quot;https://mitpress.mit.edu/index.php?q=books/little-schemer&quot;&gt;&lt;em&gt;The Little Schemer&lt;/em&gt;&lt;/a&gt; for some less dry insights into Scheme.&lt;/p&gt;

&lt;h6 id=&quot;features2&quot;&gt;Features&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/h6&gt;

&lt;p&gt;&lt;strong&gt;First Class Macros.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Lisp macros are unlike macros in other languages. I can best describe macros as functions that return code as data (which I understand still isn’t clear).&lt;/p&gt;

&lt;p&gt;In order to really understand macros (and the implications of macros, without which you don’t really actually understand macros), you need to understand how lisp code is interpreted. The process can be broken down into three parts.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Parsing&lt;/strong&gt;. Which can be broken down into two sub-steps,
    &lt;ol&gt;
      &lt;li&gt;Lexing (tokenizing).&lt;/li&gt;
      &lt;li&gt;Parsing the tokens into lisp values (numbers, strings, expressions, symbols…).&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Expanding&lt;/strong&gt;. This is the step where macros are evaluated and &lt;em&gt;expand&lt;/em&gt; into the code they return.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Evaluating&lt;/strong&gt;. This is your normal evaluation step where function and variable execution and manipulation happen.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let me give some code examples.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(define pair
  (lambda (x y)
    (cons x (cons y '()))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s a completely valid function in lisp that takes two arguments and adds them into an empty list, which is then returned.&lt;/p&gt;

&lt;p class=&quot;soliloquy&quot;&gt;Protip: Whatever statement is last &lt;em&gt;evaluated&lt;/em&gt; is what is returned. Every function at least returns &lt;code&gt;NIL&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now lets define a macro.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(define let
  (macro
    (lambda (var-value body)
      `((lambda (,(car var-value))
         ,body) ,(cadr var-value)))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Wait a second. That looks a lot like a function. Yep, macros are alot like functions, except for when they are evaluated.&lt;/p&gt;

&lt;p class=&quot;soliloquy&quot;&gt;Protip: Noticed in the first example how the lambda function was just set to the variable pair? That makes it a &lt;code&gt;First class function&lt;/code&gt;, which can be passed to other functions just like any other variable. In MsLisp, macros just wrap a lambda function (see the &lt;code&gt;macro&lt;/code&gt; keyword before the &lt;code&gt;lambda&lt;/code&gt; keyword?) to let the interpreter know that this particular function is special. Therefore, macros are &lt;code&gt;First class macros&lt;/code&gt; and can be passed to other functions just like their function counterparts. Most lisp macro implementations are not implemented this way, although I find understanding and mostly implementing macros in the interpreter easier this way compared to the standard implemenations.&lt;/p&gt;

&lt;p&gt;Now we can implement a macro to make it less verbose to write normal lambda functions&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(define defun
  (macro
    (lambda (name params body)
      `(define ,name
         (lambda ,params
            ,body)))))

(defun pair (x y)
  (cons x (cons y '())))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See what we did there? We wrote the macro &lt;code&gt;defun&lt;/code&gt; which we use to rewrite our pair function with. When the interpreter see’s this, it’ll replace (defun pair …) with all the code returned from the &lt;code&gt;defun&lt;/code&gt; macro. After expansion, both pair functions, old and new, result in the same code. Pretty cool huh?!&lt;/p&gt;

&lt;p&gt;The implication of macros really clicked for me when write the &lt;code&gt;+&lt;/code&gt; macro. MsLisp has a builtin function called &lt;code&gt;add&lt;/code&gt;, which adds exactly two arguments. Not one, not three, but exactly two like so &lt;code&gt;(add 1 2)&lt;/code&gt;. But what if we wanted to do this &lt;code&gt;(add 1 2 3 4)&lt;/code&gt;? Well we can! But we’ll have to write a macro.&lt;/p&gt;

&lt;p&gt;Note: I’ve gone ahead and replaced &lt;code&gt;define **name** (macro (lambda (args)))&lt;/code&gt; with &lt;code&gt;(defmacro **name** (args))&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(defmacro + (&amp;amp;rest x)
  ((Y
    (lambda (f)
      (lambda (x)
        (if (= (length x) 1)
           (car x)
           (f (cons `(add ,@(first-pair x)) (cddr x)))))))
   x))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are a few functions we haven’t defined yet in that function such as &lt;code&gt;Y&lt;/code&gt;, the recursive y-combinator, &lt;code&gt;first-pair&lt;/code&gt;, which returns the first two elements of a list, and &lt;code&gt;cddr&lt;/code&gt;, which skips the first two elements of a list and returns the remainder.&lt;/p&gt;

&lt;p&gt;Our new &lt;code&gt;+&lt;/code&gt; macro expands &lt;code&gt;(+ 1 2 3 4)&lt;/code&gt; into &lt;code&gt;(add (add (add 1 2) 3) 4)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C# Reflection in lisp.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This isn’t so much of a feature that I wanted, but just something that I though was neat and gives MsLisp a lot more functionality. Since C# can reflect on itself and know what methods it has, when can dynamically invoke these methods and create new instances of objects by calling methods like the following.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(new &quot;Mslisp.Lexical.Parser&quot; *args-if-we-need-any*)

(invoke-static (get-type &quot;System&quot; &quot;Console&quot;) &quot;Write&quot; &quot;string arg to print to console&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;Actually 19 days counting breaks and days I didn’t commit any work. 15 is the number of work days. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;As MsLisp gets updated, redesigned, ported, these &lt;em&gt;features&lt;/em&gt; are sure to be added/removed and strengthened/weakened in functionality. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
      <pubDate>Mon, 29 Jun 2015 00:00:00 -0400</pubDate>
      <guid>http://www.mattsheehan.me/archives/mslisp/</guid>
      <dc:date>2015-06-29T00:00:00-04:00</dc:date>
    </item>
    <item>
      <link>http://www.mattsheehan.me/archives/billy-joel/</link>
      <description>&lt;p&gt;Billy Joel’s 1983 album &lt;em&gt;&lt;strong&gt;An Innocent Man&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/KuS6-Iksx4w&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
</description>
      <pubDate>Fri, 24 Apr 2015 00:00:00 -0400</pubDate>
      <guid>http://www.mattsheehan.me/archives/billy-joel/</guid>
      <dc:date>2015-04-24T00:00:00-04:00</dc:date>
    </item>
    <item>
      <link>http://www.mattsheehan.me/archives/jekyll-plugins/</link>
      <description>&lt;p&gt;There’s not a lot of really good documentation on how to roll your own &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt; plugins, and most of the plugins that currently exist aren’t very good. That includes a few of my first attempts. Through some trial and error, &lt;a href=&quot;http://stackoverflow.com&quot;&gt;Stackoverflow&lt;/a&gt; searching, and &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;source code&lt;/a&gt; browsing, I’ve managed to gather a few ‘best practices’. Especially for writing Generators, the most popular and used type.&lt;/p&gt;

&lt;p class=&quot;soliloquy&quot;&gt;There are four types of &lt;a href=&quot;http://jekyllrb.com/docs/plugins/&quot;&gt;plugins&lt;/a&gt;, Generators, Converters, Commands and Tags. This post is about generators&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;There are four important things you should know about generators first.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;They are invoked before the site is built, but after it is initialized, and usually directly copied to the _site folder.&lt;/li&gt;
  &lt;li&gt;They must inherit from Jekyll’s base Generator class.&lt;/li&gt;
  &lt;li&gt;Like all other plugins, they belong in your _plugins folder.&lt;/li&gt;
  &lt;li&gt;They’re often written wrong, or at least not optimal, and most of the generators you steal will clutter up your directory.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Generator’s only have one important function to know which is &lt;code class=&quot;highlight&quot;&gt;generate&lt;/code&gt;, and is passed one argument &lt;code&gt;site&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;module Jekyll
    class MyGenerator &amp;lt; Generator
        def generate(site)
            # do stuff here
        end
    end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There’s two important properties of &lt;code&gt;site&lt;/code&gt; that you should learn first, those being the array &lt;code&gt;static_files&lt;/code&gt; and the hash map &lt;code&gt;pages&lt;/code&gt;. If you want your generator to create files that need to be converted, therefore have YAML front matter, you should add your page to &lt;code&gt;site.pages&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;module Jekyll
    class MyGenerator &amp;lt; Generator
        def generate(site)
            site.pages &amp;lt;&amp;lt; MyPage.new(site, site.source, 'some/directory', 'file.html')
        end
    end

    class MyPage &amp;lt; Page
        def initialize(site, base, dir, name)
            super(site, base, dir, name)
        end
    end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I created a custom page class that inherits from Jekyll’s base &lt;code&gt;Page&lt;/code&gt; class. That’s not necessary in this example if you’re not doing any custom page work, but that will be important later.&lt;/p&gt;

&lt;p&gt;What I’m more concerned about is &lt;code&gt;static_files&lt;/code&gt;. These do not have YAML front matter and do no post-processing. But the problem with static files you see, is if you create static files in your generator and add them to the sites static_files array, those files would first get created in your project directory and then copied into your site’s root folder, which is usually _site.&lt;/p&gt;

&lt;p&gt;Do you see the problem? There are duplicate files being created then immediately copied and cluttering up your source directory. Since files created at build shouldn’t be added to source control you then end up ignoring those created directories and files in your .gitignore file. I know this isn’t super performant code, so it’s not really a big deal. But sometimes it’s fun to just be clever and see how much better you can do.&lt;/p&gt;

&lt;p&gt;There’s actually another secret that Jekyll hides that let us take advantage of waiting to write our static files until after the site is build and therefore only write it once into your site root folder. The base &lt;code&gt;Page&lt;/code&gt; class used above actually has an important method called ‘write’, which is passed a `dest’ string.&lt;/p&gt;

&lt;p&gt;When write is invoked is when we should actually be writing all of our static files. So our end code would look something like below.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    class MyGenerator &amp;lt; Generator
        def generate(site)
            # add our pages here to static files array
            site.static_files &amp;lt;&amp;lt; MyPage.new(site, site.source, 'some/directory', 'file.html')
        end
    end

    class MyPage &amp;lt; StaticFile
        def initialize(site, base, dir, name)
            super(site, base, dir, name)
        end

        def write(dest)
            # write is called after _site directory is built
            # lets write our static files once here
            path = File.join(dest, base, @dir)
            FileUtils.mkdir_p(path)

            # build up your file...
            ...

            # write file
            File.open(File.join(path, @name), 'w') { |f| f.write(file) }
        end
    end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The secret is overloading the pages write method, which is usually invoked to just copy static files&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p class=&quot;soliloquy&quot;&gt;You should also notice that MyPage is inheriting from StaticFile this time instead of Page. And remember to put your class’s under the Jekyll namespace.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;This is probably the first post I’ve written in two years with any meat on it. Not good meat mind you, think more pink slime. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;&lt;del&gt;I should link these notes in the post.&lt;/del&gt; Done. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
      <pubDate>Tue, 21 Apr 2015 00:00:00 -0400</pubDate>
      <guid>http://www.mattsheehan.me/archives/jekyll-plugins/</guid>
      <dc:date>2015-04-21T00:00:00-04:00</dc:date>
    </item>
    <item>
      <link>http://www.mattsheehan.me/archives/site-updates-again/</link>
      <description>&lt;p&gt;I’ve made a few site updates, some of which you might notice. To begin, the site’s what I consider to be more ‘content’ focused, meaning less clutter and bringing the posts to the center of attention. Most of the updates are actually behind the scenes. Such as the migration from CSS to LESS and the updated styling that happened as I reviewed my previous work (from over a year ago) and updated it with the new knowledge that I’ve learned. There’s also new liquid templates that I’ve written to fit better and are cleaner. There’s a lot less funk in this version which I’m happy with.&lt;/p&gt;

&lt;p&gt;For notalgia here’s some snippets of the two previous major changes.&lt;/p&gt;

&lt;p&gt;The last update (from one year ago):&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/oldsite.PNG&quot; class=&quot;post-img&quot;&gt;&lt;img src=&quot;/assets/images/oldsite.PNG&quot; alt=&quot;oldsite&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And the initial site (from two years ago):&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/oldoldsite.PNG&quot; class=&quot;post-img&quot;&gt;&lt;img src=&quot;/assets/images/oldoldsite.PNG&quot; alt=&quot;oldoldsite&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I’ll Probably continue tweaking things for a while still, and updating a few inconsistencies I’ve noticed, but I think this is how the site’s going to change. Until next year that is.&lt;/p&gt;

</description>
      <pubDate>Tue, 14 Apr 2015 20:00:00 -0400</pubDate>
      <guid>http://www.mattsheehan.me/archives/site-updates-again/</guid>
      <dc:date>2015-04-14T20:00:00-04:00</dc:date>
    </item>
    <item>
      <link>http://www.mattsheehan.me/archives/cryptocurrency/</link>
      <description>&lt;p&gt;Cryptocurrencies–Bitcoin, Litecoin, Darkcoin, and even the Deadpool of cryptocurrencies, Dogecoin–are gaining tremendous popularity outside of their initial cult following (although they haven’t breeched the tech world cult). In honor of these, I’ve added two wallet’s on the About Me page.&lt;/p&gt;
</description>
      <pubDate>Fri, 09 May 2014 20:04:28 -0400</pubDate>
      <guid>http://www.mattsheehan.me/archives/cryptocurrency/</guid>
      <dc:date>2014-05-09T20:04:28-04:00</dc:date>
    </item>
    <item>
      <link>http://www.mattsheehan.me/archives/featured-site/</link>
      <description>&lt;p&gt;Fellow Readers! A new site has caught my attention. I think it’s worth your time to checkout.&lt;/p&gt;

&lt;p&gt;Follow the link below.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.mattamabeli.com&quot;&gt;Matt Amabeli’s Blog Site&lt;/a&gt;&lt;/p&gt;
</description>
      <pubDate>Mon, 21 Apr 2014 20:04:28 -0400</pubDate>
      <guid>http://www.mattsheehan.me/archives/featured-site/</guid>
      <dc:date>2014-04-21T20:04:28-04:00</dc:date>
    </item>
    <item>
      <link>http://www.mattsheehan.me/archives/site-updates/</link>
      <description>&lt;p&gt;I’ve made a few updates to the site. Most of which will probably go unnoticed unless you have an extroardinary attention to detail.&lt;/p&gt;

&lt;p&gt;First, you can now pin this site to your start menu on Windows 8.1 if you are using Internet Explorer 11 in Windows 8 mode. Not only will you get a nice choice of four sizes of icons to choose from but you’ll also get live tile updates so you can get a gist of what the top posts are. These live updates are being pulled from a list of xml files that are auto generated with this &lt;a href=&quot;https://github.com/sheehamj13/jekyll-live-tiles&quot;&gt;Jekyll plugin&lt;/a&gt; that I wrote over the weekend. It can also be found &lt;a href=&quot;http://jekyllrb.com/docs/plugins/&quot;&gt;on the Jekyll site here&lt;/a&gt; about halfway down the page under Available Plugins then Generators.&lt;/p&gt;

&lt;p&gt;To pin this site to your homescreen open up IE11 in Windows 8 mode and click favorites (the star), then pin (the pushpin).&lt;/p&gt;

&lt;p&gt;If you have an iPhone you can pin the site to your home screen and also be greeted with new icons (my initials) as well. I found a really easy way to export different size png’s from inkscape with a blue (#497bad, also found all over this site) background.&lt;/p&gt;

&lt;p&gt;The RSS feed is now auto generated with a &lt;a href=&quot;https://github.com/sheehamj13/jekyll-rss-feed&quot;&gt;Jekyll plugin&lt;/a&gt; that I wrote this weekend as well. Both plugins are easy to use if you have a Jekyll powered site. Just clone the repos and put the ruby scripts in your &lt;code&gt;_plugins&lt;/code&gt; folder. The RSS url also changed. It’s now http://mattsheehan.me/feeds/rss.xml. So update your rss subscriber to keep getting updates.&lt;/p&gt;

&lt;p&gt;I also cleaned up the github repo this site is hosted on as well, so looking at the repo shouldn’t be such a mess. The repo the site is hosted on has also changed. Instead of using Githubs project pages (gh-pages orphan branches), everything’s now hosted using Githubs user pages under the sheehamj13.github.io repo.&lt;/p&gt;
</description>
      <pubDate>Fri, 18 Apr 2014 20:04:28 -0400</pubDate>
      <guid>http://www.mattsheehan.me/archives/site-updates/</guid>
      <dc:date>2014-04-18T20:04:28-04:00</dc:date>
    </item>
    <item>
      <link>http://www.mattsheehan.me/archives/setup/</link>
      <description>&lt;p&gt;I spend a lot of time at my computer and people like me also spend a lot of time at their computers. So I’ve been thinking a lot about my &lt;del&gt;setup&lt;/del&gt; Battle Station and how I work.&lt;/p&gt;

&lt;p&gt;The most important part of your setup is not your computer, it’s your monitor(s). Think about it, your computer is useless without some screen. And so a good screen is more than worth it. I use a 27” AOC monitor hooked up to my laptop that provides me with maximum screen real estate. It’s big, it’s clear, it’s colorful, and I wish I had two (three?) of them.&lt;/p&gt;

&lt;p&gt;Trailing in second is my Lenovo ideapad u530. It’s running a dual-core i7, that is surprisingly powerful. I’ve had this thing for more than a few months now, and like spending time with all things, you start to notice it’s flaws. One. It only has one hdmi port (this isn’t really a flaw of this laptop, just the nature of laptops in general). Two. The screen’s not IPS, it’s a good screen but not a great screen.&lt;/p&gt;

&lt;p&gt;I’ve always been skeptical of the usefullness of expensive keyboards. But after spending hours typing for months, I’m convinced a good keyboard is a must. Over in this corner of the woods we’re rocking the Microsoft Sculpt keyboard that makes typing a lot less straining.&lt;/p&gt;

&lt;p&gt;Which brings me to the Microsoft Arc Touch mouse. Besides a few quirks where scrolling is funning, this is the best mouse I’ve ever used. It’s light weight on my crammed desk and it’s portability means it’s staying with for awhile.&lt;/p&gt;

&lt;p&gt;I use a Dell Venue Pro 8 as my tablet and a regular laptop bag to carry things around in as well as Bose QC15 acoustic noise cancelling headphones as my ear pleasurers.&lt;/p&gt;

&lt;p&gt;I’m tired of writing. Out.&lt;/p&gt;
</description>
      <pubDate>Fri, 21 Mar 2014 20:04:28 -0400</pubDate>
      <guid>http://www.mattsheehan.me/archives/setup/</guid>
      <dc:date>2014-03-21T20:04:28-04:00</dc:date>
    </item>
    <item>
      <link>http://www.mattsheehan.me/archives/drunken-ironman/</link>
      <description>&lt;p&gt;When I first created this blog over a year ago, I wanted something quick, dirty, and free (QDAF). So Jekyll hosted on GitHub with the shell of bootstrap it was. In my rush, I hastenly clicked create random repository name on Github which landed me with drunken-ironman. I rolled with it because I was in a rush, but since then creating random repository names or codenames for my repositories has kind of become my thing.&lt;/p&gt;

&lt;p&gt;Since that first year of this blog, it went on to become one of the top 150 sites in the country. Well…not exactly. What actually happened is I posted a few times and never touched this thing again. I’ll admit, not a great start. But then something happened. Something that I promised myself would never happen again. I forked this blogs repository from Github after seeing a post about how to make sprites in css that I wanted to try out. After I created my sprite I kept messing around until I hooked myself into revamping mattsheehan.&lt;/p&gt;

&lt;p&gt;The revamping started with creating a css grid framework, which the beginnings of are used on this site and will soon be an independent repository on Github. I wanted something like bootstrap or any of the other hundreds of grid frameworks but without all the weight. Something light, portable, can be built from as a starting point for other sites. The framework’s no where near where I want it to be, but it’s a better start than before.&lt;/p&gt;

&lt;p&gt;I’m starting to learn the in’s and out’s of Jekyll as well. But I don’t love it. It’s where this blog lives for now but as I start implementing the future of my projects this site will probably move to Ghost. The benefits of Ghost you ask compared to Jekyll? Well heres a few.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Ghost uses Node.js. Jekyll’s backend is Ruby. I prefer to mess with Node.js.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Ghost at least uses sqlite. Jekyll uses no database, just flat files. Which is no harder to manage until after you reach the point where you have more than five posts (which we are approaching!). Sqlite is not hard. It’s a nice little database perfect for blogs. Jekyll just has more baggage.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I like that Jekyll uses liquid html templating. Ghost also uses something similiar. Ok fine we’ll call this one a draw.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Jekyll does not fit well with Windows. I’ve had such a terrible time with installing it on Windows that I don’t even have Jekyll on my computer. I just code, push to Github, and hope it works. No testing. This blog is in constant production.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Even Jeff Atwood of &lt;a href=&quot;http://blog.codinghorror.com&quot; target=&quot;_blank&quot;&gt;Coding Horror&lt;/a&gt; has switched his blog to Ghost. By the way, Jeff Atwood is the guy who made Stack Exchange.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So there that’s it. Mattsheehan is going to stay my bloggin platform, one way or another. If you ever check out Bitwhisp, that’s cool as well, but I don’t have the blogging stamina to manage two similar sites.&lt;/p&gt;
</description>
      <pubDate>Fri, 21 Mar 2014 20:04:28 -0400</pubDate>
      <guid>http://www.mattsheehan.me/archives/drunken-ironman/</guid>
      <dc:date>2014-03-21T20:04:28-04:00</dc:date>
    </item>
    <item>
      <link>http://www.mattsheehan.me/archives/checkout-the-sprite/</link>
      <description>&lt;p&gt;Checkout the new sprite add to the bottom of every page.&lt;/p&gt;

&lt;p&gt;It was fun.&lt;/p&gt;

&lt;p&gt;If you want to try yourself there’s a nice tutorial at this site. Just find a cool sprite sheet to play with.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://bryanbraun.com/2014/03/15/how-i-rebuilt-flying-toasters-using-only-css-animations&quot;&gt;bryanbaun.com&lt;/a&gt;&lt;/p&gt;
</description>
      <pubDate>Sat, 15 Mar 2014 20:04:28 -0400</pubDate>
      <guid>http://www.mattsheehan.me/archives/checkout-the-sprite/</guid>
      <dc:date>2014-03-15T20:04:28-04:00</dc:date>
    </item>
    <item>
      <link>http://www.mattsheehan.me/archives/what-i-ve-learned-so-far/</link>
      <description>&lt;p&gt;After my first week of having a &lt;em&gt;real&lt;/em&gt; job, this is what I’ve learned.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;I am not the great programmer I thought I was.&lt;/strong&gt; This isn’t at all a bad thing though. As it turns, I have a lot to learn. Getting an education is a nice touch and something to put on resumes, but it does little in the way of actually preparing you for work life. I have personally learned that there is a large chasm between developing small programs working with one algorithm at a time and being able to develop something that is marketable and an actual product. Even my own side projects that I’ve taken on over the years are small and simple in comparison to developing an actual product. &lt;em&gt;I think it’s also important to note here that in a real production environmdent you’re working with more than one language at a time.&lt;/em&gt; So it might be nice to know the depth of Java, it’s also important to be able to pick up other languages quickly and be able to see how they integrate with what your working with.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Microsoft is a lot cooler than I’ve been told to believe.&lt;/strong&gt; Yes, Windows 8 still sucks. Yes, Microsoft as a company doesn’t seem to have a real clear direction. But behind all of those things that Microsoft does wrong that you hear about most frequently, they do a lot of things right. Microsoft Visual Studio is cool, plain and simple. Sure it’s just an IDE but it’s literally one of the best for developing Microsoft programs, and a lot of companies, believe it or not, are developing Microsoft programs. ( &lt;em&gt;On a side note, the other IDE that I really like is NetBeans which is great for developing almost anything with and Sublime Text, which sure is technically just a text editor, but it’s so damn slick looking&lt;/em&gt; ). C# is also a really nice language and easy to pick up if you already know a little Java or some other Class Object language.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;The company you work for is important.&lt;/strong&gt; It’s a rare environment where people can have fun &lt;em&gt;and&lt;/em&gt; get work done at the same time, which I think is one of the biggest differences between working with a small company or a large corporation. Small companies are lean, which as a software developer is important, and can get away from all the corporate bullshit. Now I don’t know what being a software developer for a large corporation is like, but I know one thing and it’s that I am for sure not working for the man.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;word-of-the-day&quot;&gt;Word of the day:&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;effete&lt;/strong&gt;&lt;/p&gt;

&lt;h5 id=&quot;quote-of-the-day&quot;&gt;Quote of the day:&lt;/h5&gt;

&lt;blockquote&gt;
  &lt;p&gt;If I had asked my customers what they wanted they would have said a faster horse&lt;/p&gt;

  &lt;blockquote&gt;
    &lt;p&gt;-credited to Henry Ford (on the usefulness of R&amp;amp;D)&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;
</description>
      <pubDate>Fri, 24 May 2013 20:18:15 -0400</pubDate>
      <guid>http://www.mattsheehan.me/archives/what-i-ve-learned-so-far/</guid>
      <dc:date>2013-05-24T20:18:15-04:00</dc:date>
    </item>
    <dc:date>2015-09-23T00:00:00-04:00</dc:date>
  </channel>
</rss>